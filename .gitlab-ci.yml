stages:
  - build
  - deploy

build:
  stage: build
  image:
    name: moby/buildkit
  tags:
    - microk8s
  before_script:
    - mkdir -p  ~/.docker
    - >
      echo -n "{
        \"auths\": {
          \"$CI_REGISTRY\": {
            \"auth\": \"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64 -w 0)\"
          }
        }
      }" > ~/.docker/config.json
  script:
    # - export BUILDKIT_HOST=docker-container://buildkit
    - >
      buildctl-daemonless.sh build \
       --frontend=dockerfile.v0 \
       --local context=$CI_PROJECT_DIR \
       --local dockerfile=$CI_PROJECT_DIR \
       --output type=image,name=$CI_REGISTRY/w1ndblow/ci-cd-example:$CI_COMMIT_SHORT_SHA,push=true

deploy:
  stage: deploy
  image:
    name: alpine/helm
  tags:
    - microk8s
  script:
    - >
      helm upgrade --install --atomic testpostgresql oci://registry-1.docker.io/bitnamicharts/postgresql \
        --set global.postgresql.auth.username=app_user  \
        --set global.postgresql.auth.password="$POSTGRES_PASSWORD"	\
        --set global.postgresql.auth.database=appdb  \
        --set primary.persistence.enabled=false
    - >
      helm upgrade --install --atomic --values values.yaml django infrastructure/django-chart \
        --set-string envConfigs.DB_PASSWORD="$POSTGRES_PASSWORD" \
        --set-string envConfigs.DB_HOST="10.152.183.130" \
        --set image.repository="$CI_REGISTRY/w1ndblow/ci-cd-example" \
        --set image.tag=$CI_COMMIT_SHORT_SHA
    # --set image.tag=$CI_COMMIT_SHORT_SHA

# --kube-apiserver=https://kubernetes.default \
# --kube-insecure-skip-tls-verify=true \
# --kube-token=$K8S_SERVICE_ACCOUT_TOKEN \
# --namespace default

# testpostgresql.default.svc.cluster.local"
